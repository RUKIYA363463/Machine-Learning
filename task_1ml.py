# -*- coding: utf-8 -*-
"""TASK 1ML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13hu4OWuaJO3sYiDqWcSgspvLD-YdeHKv
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import geopandas as gpd
from shapely.geometry import Polygon
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler,MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.linear_model import LinearRegression

rm = pd.read_csv("/content/all_perth_310121.csv")
rm.head()

rm.describe()

rm.info()

rm.isnull().sum()

rm = rm.dropna()

rm.duplicated().sum()

rm

rm.plot(kind='scatter', x='PRICE', y='LAND_AREA', s=25, alpha=0.3, color='purple', figsize=(15, 10))

GARAGE = rm['GARAGE'].value_counts()
GARAGE_count_sorted = GARAGE.sort_index()
GARAGE_count_sorted.plot(kind='line', color='pink')
plt.title('NO. OF GARAGE')
plt.xlabel('GARAGE')
plt.ylabel('Count')
plt.xticks(rotation=0)
plt.show()

BEDROOMS=count = rm['BEDROOMS'].value_counts()
BEDROOMS_count_sorted = BEDROOMS.sort_index()
BEDROOMS_count_sorted.plot(kind='bar', color='green')
plt.title('NO. OF BEDROOMS')
plt.xlabel('BEDROOMS')
plt.ylabel('Count')
plt.xticks(rotation=0)
plt.show()

BATHROOMS=count = rm['BATHROOMS'].value_counts()
BATHROOMS_count_sorted = BATHROOMS.sort_index()
BATHROOMS_count_sorted.plot(kind='line',color='red', figsize=(10, 8))
plt.title('NO. OF BATHROOMS')
plt.xlabel('BATHROOMS')
plt.ylabel('Count')
plt.xticks(rotation=0)
plt.show()

rm.plot(kind='scatter', x='FLOOR_AREA', y='LAND_AREA', s=25, alpha=0.5, color='BROWN', figsize=(15, 10))

encoder=LabelEncoder()

encoding_columns = ['ADDRESS', 'SUBURB', 'NEAREST_STN',	'NEAREST_SCH']
for col in encoding_columns:
    rm[col] = encoder.fit_transform(rm[col])

rm

rm = rm.drop(columns=[ 'DATE_SOLD'], axis=1)

x=rm.drop(columns=['PRICE'],axis=1)
y=rm['PRICE']

print(x.dtypes)

scaler = MinMaxScaler()
x = scaler.fit_transform (x)
y = scaler.fit_transform(y.values.reshape(-1, 1))

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

in_model = LinearRegression()
in_model.fit(x_train, y_train)

y_pred = in_model.predict(x_test)

mae = mean_squared_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)

mse

mae

in_acc = r2_score(y_test, y_pred)
in_acc