# -*- coding: utf-8 -*-
"""TASK 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d7wDZ4rxFLi6sVEDshj1hUSaQ0F-7Le5
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.svm import SVR
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report

emails_t2 = pd.read_csv('/content/Spam.csv')

emails_t2.head()

emails_t2.info()

emails_t2.shape

emails_df_cleaned = emails_t2.drop_duplicates(keep='first')

emails_df_cleaned.isnull().sum()

emails_t2.describe()

emails_t2.plot(kind='scatter', x='capital_run_length_total', y='capital_run_length_average', s=5, alpha=0.3, color='purple', figsize=(2, 4))
plt.show()

emails_t2.loc[emails_t2['spam'] == 0, 'spam'] = 'ham'
emails_t2.loc[emails_t2['spam'] == 1, 'spam'] = 'spam'
emails_t2.head()

plt.figure(figsize=(10, 5))
sns.countplot(emails_t2['spam'])
plt.title('Spam vs Ham')
plt.show()

x=emails_df_cleaned.drop(columns=['spam'])
y=emails_df_cleaned

x=emails_df_cleaned.drop(columns=['spam'])
y=emails_df_cleaned['spam']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)
x = emails_df_cleaned.drop('spam', axis=1)
nb_classifier = MultinomialNB()
nb_classifier.fit(x_train, y_train)

y_pred = nb_classifier.predict(x_test)

y_pred_nb = nb_classifier.predict(x_test)
print(classification_report(y_test, y_pred_nb))

y_pred_nb

sns.countplot(x=y_pred_nb)
plt.title('Spam vs Ham')
plt.xlabel('')
plt.ylabel('Count')
plt.show()

nb_accuracy = accuracy_score(y_test, y_pred_nb)
nb_report = classification_report(y_test, y_pred_nb)
print("Naive Bayes Accuracy:", nb_accuracy)
print("Naive Bayes Classification Report:\n", nb_report)
print("Naive Bayes Accuracy:")
print(nb_accuracy)

x = emails_df_cleaned
y = emails_df_cleaned['spam']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

x = emails_df_cleaned.drop('spam', axis=1)
y = emails_df_cleaned['spam']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

svm_classifier = SVC()
svm_classifier.fit(x_train, y_train)

y_pred_svm = svm_classifier.predict(x_test)

y_pred_svm

sns.countplot(x=y_pred_nb)
plt.title('Spam vs Ham')
plt.xlabel('')
plt.ylabel('Count')
plt.show()

svm_accuracy = accuracy_score(y_test, y_pred_svm)
svm_report = classification_report(y_test, y_pred_svm)
print("\nSupport Vector Machine Classifier:")
print("SVM Accuracy:", svm_accuracy)
print("SVM Classification Report:\n", svm_report)

model_performance = pd.DataFrame({
    'Model': ['Naive Bayes', 'Support Vector Machine'],
    'Accuracy': [nb_accuracy, svm_accuracy]
})

plt.figure(figsize=(8, 6))
sns.barplot(x='Model', y='Accuracy', data=model_performance)
plt.title('Model Accuracy Comparison')
plt.xlabel('Model')
plt.ylabel('Accuracy')
plt.ylim(0, 1)
plt.show()

